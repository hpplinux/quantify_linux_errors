TABLE OF CONTENTS
=================

### TODO tmp
## Kconfig
### How to unclause `choice`
### Compilation times
### TODO
# Laterbase
### DONE
### NEWEST MEETING AGENDA
### -Wall
### REFERENCES



### TODO tmp

## Kconfig

  * Find out why some HAVE_FOOs have dependencies.

  * How to unclause `choice`

  * Maybe look at how to get Kconfiglib.py to open a .config file
      - It can first open a .config file when it has opened a Kconfig file - 
        I think. It looks that way in one of the examples (maybe grep_help)
                                                                I think]

  * Just start creating a script, that will transform the Kconfig-files

  * Begin permuting the kconfig file.
      - I took the concatenated Kconfig file, and moved the `config 64BIT` part
        all the way down to the bottom. 64BIT is a dependency for many many 
        features, so if I moved that to the bottom something could maybe go 
        wrong.
        But it didn't. the `.config` files were the same exept for the line
        `64BIT=y`, when I ran `make defconfig` on both of the Kconfig files.
    [PENDING - will hear with Claus first]


### How to unclause `choice`

There are two kinds of choice blocks. A one-choice, and a multiple-choice one.                      
multi-choice has:

    choice 
        tristate "some text"
    config FOO

one-choice has:
    choice
    config FOO
    config BAR

But so far, I have only found one multiple-choice (USB Gadget Drivers)
There will probably be some more, or the same in all the different 
architectures. (I only searched through the x86 one)

Here is a suggestion on how to maybe unclause the choice.
    choice
        config FOO
        config BAR
        config FOOBAR

will probably be something like:

    config FOO
        select BAR=n
        select FOOBAR=n
    config BAR
        select FOO=n
        select FOOBAR=n
    config FOOBAR
        select FOO=n
        select BAR=n

But I will probably have to create some pseudo-configs like the HAVE_FOO
to not break any dependencies. (Because `select` does not consider deps)

    config HAVE_FOO
        select HAVE_BAR=n
        select HAVE_FOOBAR=n
    config HAVE_BAR
        select HAVE_FOOBAR=n
        select HAVE_FOO=n
    config HAVE_FOOBAR
        select HAVE_BAR=n
        select HAVE_FOO=n
    config FOO
        depends on HAVE_FOO
    config BAR
        depends on HAVE_BAR
    config FOOBAR
        depends on HAVE_FOOBAR

### Compilation times

  * In average (out of 600 results), one compilation takes 7.85 minutes.
      - This is wrong.. I forgot that there are not 100 seconds per minute :(
      - It is actually 8.05 minutes, which is 8:03 minutes.
      - This makes for 1440/8 = 180/day, not 250 as I first thought.

  * To search for gcc not followed by Wall in Vim, you have to search for:
    `/gcc\ \(.*Wall\)\@!`
    There are like 55 lines in the output of `make V=1` that match this pattern
    out of 2144 lines, which match `gcc\ `.

### TODO

  * In file "permute_....py" the concatenate() function overlooks a few 
    lines, which start with `source` because they are indented.
  * "You won't be able to produce a 64 bit kernel unless the compile tools are 
    already designed to output 64bit programs"
    - [8](LinuxQuestions.org)
    Look into what types of configurations I will not be able to compile, and if
    that is a problem.

  * Does `make randomconfig` always make a valid config file?
      - If `make randconfig` does not create a valid config (which has happened
        to me a couple of times), it will say so itself.
        I am not sure, though, if it will output it to `stderr` or how I can 
        check if there were any kconfig errors.
          o It outputs to stderr
        [DONE]
      - Try to look into the code.
        [WILL NOT]
      - Also try to see the `tinyconfig` and `allnoconfig`, the features that 
        exist in those configs - I guess - will always be enabled, and not 
        randomized.
        [TODO]
      - Check [7](kconfig) out. It says something about the percentages of when
        randconfig ansers y/n and y/n/m.
        [WILL NOT]
      - When cross-compiling, I have to figure out the ratio to how often I
        should set the ARCH to what.
        See line 224 in the Makefile in root linux dir to see how it finds the
        ARCH.
      - Maybe I can try to look into all the different architectures, to see how
        many different features there are in each, and then create the ratio 
        from that.
        

  * Try to make a script that will randomize the KConfig tree, so that we can
    run `make randconfig`, but we permutate the order of the KConfig files.

  * Set up an online service, which collects all data that is sent to it.
    Instead of me having to collect all data from a USBdisk or something.
      - But talk to ITU. Maybe I can borrow a server there.
      - Also put the data into a database when it arrives. 
          o Maybe sqlite, since it is filebased, so easy to move.

  * Find out how the VM works.
      - What VM client does ITU have
      - Can it run a .vbox file?

# Laterbase

  * `categorize.py` has an error, which makes it output an 'error' that is 
    multiple lines long.

  * Find out if running `make` actually runs `gcc -Wall`
      - maybe [5](ntu.edu.sg) can help figure something out
      - It looks like that both busybox and linuxkernel uses the -Wall flags in
        their makefiles. But I guess there are like multiple 100s of makefiles
        that I will have to check if all are using the  -Wall flag? (in linux,
        in busybox, there only seem to be 3 makefiles, and only 1 of these 
        contain the word `gcc`)
      - I can run `make V=1` to see all the commands that `make` are issuing, 
        and then grep those without `-Wall` to see if there are any.
        [TODO]
          o There are like 55 / 2000 lines that contain `gcc` that do not have 
            the `-Wall` flag... This is not a lot, so I am not sure I will look
            into this.
            BTW: `make -d` and `make V=1` is sortof the same, I think.

  * Find out if I need a dependency for busybox... Maybe.
      - Maybe I do not need it, since it really is about Linux after all.
      - Yeah, but then again.. Maybe the report could say something about the
        difference between Linux and Busybox.

  * Should I report errors that occur in filenames that end with `.o`?
      - Are these the same lines, that start with `make: ***` ?
      - Those are binary files, and are gibberish, so do not count those, I 
        guess. But still find out, and be sure.


### DONE

  * The md5sum is calculated from the config. But sometimes, there may be
    comments, that are included in some configs, but not in others. This can 
    mean two effectively equal configs, but md5sum wise not equal configs.
    Mitigation: remove all comments (lines starting with '#') and sorting.
    [DONE]

  * Find out if `make -j` needs to be (#cores * 2 + 1) instead of (#cores + 1)
      - Someone said (1.5 x #cores), but I think (#cores + 1) is fine.
      - But maybe set up a controlled experiment with the defaultconfig
        [DONE]  It seems like (# of cores + 1) is fastest on my computer, and if
                you have more than that, it does not get slower, so having it be
                -j20 might not be a problem.

  * Read [6](kernel.org) - maybe there is something about kconfig that is worth
    knowing.
    [MAYBE LATER]

  * `gcc` outputs in danish. This is a problem for python later on. Therefore it
    should be changed somehow.
      - Or maybe I should just make the script aware of this. Or somehow make it
        able to handle it.
    [DONE]

  * Set the gcc output to english
    [DONE]

  * Find out what the bottom lines in the buginfo files mean.
      - make: *** Waiting for unfinished jobs...
      - Maybe it has something to do with me compiling with multiple cores. that
        would make sense, I think.
      - I am preetty sure, it has something to do with the multicore, and is neg-
        legitible. Marked as done.
    [DONE]

  * Implement a MapReduce kind of logfile, for easier plotting later on.
      - Time
          o Real time
          o Sys time
          o User time
          o Output
          o maxR
          o All the other values always report 0, so do not bother.
      - Number of errors
      - The filename it should append to should be [#cores]x[clock]
      - Number of features enabled
      - Append [# of distinct error types] to matching filenames.
          o Wunused
          o Wunitialized
          o etc...
      - Maybe first find out how long time it will take to run the python script
        on many results. If it is fast enough, then this would be a better 
        solution, since mapreduce sum files can be inconsistent with the real 
        data.
    [DONE - pending]

  * Maybe make lots of configurations, and look at the statistically. How random
    are they really?
      - Claus said, that the chinese guys had already done this, and I should
        not try to do it. So I will not spend more time on it for now.
    [DONE - pending]

  * Make an alias from `make install`, so I don't accidentally install a weird
    kernel.
    [DONE - will not do]

  * Make the status into one single line in stead of 6 lines per compile.
    [DONE]

  * Try to see how many kernels can be compiled in a day by a normal laptop.
      - It really depends. All from 50 to 250 a day.
    [DONE]

  * make_and_get_errors.sh should also write down the computer specs.
      - CPU
      - RAM
    [DONE]

  * Dig into running `make O=dir` to create all the output files in another dir.
    This could maybe help me save some time, since I would not have to untar 
    everything again.
      - This TOTALLY works. This can possibly save me some time..
      - I was wrong. When running `make` it cannot find the config, and stuff.
        So I will just go back.
    [DONE]

  * Download the 'BusyBox' code, and experiment on that. It is not as big, and
    is therefore faster to compile.
    [DONE!]

  * Try to get it to make some errors, and make it report back in the format we
    want (see section 'ERROR DATA')
      - I have started on the regular expressions, but they are not all done. I
        only get half of the errors on the regexps.
    [DONE]

  * Should I run `make all` in stead of just `make`?
      - I am pretty sure that `make all` is the same as just `make`
      - It is the same. It is stated at the last line in `make help`
    [DONE]

  * Can I use `make clean` or `make distclean` in stead of deleting the whole
    directory and untarring again?
      - I would not count on it. I tried taking the md5sum of the files list
        before `make distclean` and after unpacking the tar, and it was not
        the same. So better off just untarring.
    [DONE]

  * Can I replicate one of the bugs from VBDb.itu.dk?
      - How can I tell what kernel version the commits are from?
        [DONE - will not do]

  * What kind of bugs can `cgg -Wall` find?
      - Look at [3](gnu.org), it states what types of errors `gcc -Wall` will 
        find.
      ! But maybe start by defining what types of errors I would like. Maybe use
        the types they use in [4](VBDb.itu.dk).
      ! At the meeting 26. feb 2015 it was decided to use the error types from
        `gcc -Wall`. Not the ones from [4](VBDb.itu.dk).

### NEWEST MEETING AGENDA

- KConfig: Syntactic Specification
    Read the kconfig-language.txt file
- Find a Parser for Kconfig and figure out how to get an AST (Abstract Syntax Tree)
    Look for parsers to KConfig
    Maybe `make randconfig` is a parser?
    - TypeChef
    - Kconfiglib
- Write a couple of Kconfig transformation examples
    Try to get rid of the `menu` and `prompt` stuff, and see if it outputs the same
    Try to rewrite everything from `if FOO;config BAR;endif` to `config BAR; depends FOO`
- Try to find an error (and a "good" warning) in Linux and show the format!
    Look at 42 bugs homepage[4] to see what bugs they have found
    Try to classify all the bugs, and know what types there are, Elvis


### -Wall

-Waddress   
-Warray-bounds=1 (only with -O2)  
-Wc++11-compat  -Wc++14-compat
-Wchar-subscripts  
-Wenum-compare (in C/ObjC; this is on by default in C++) 
-Wimplicit-int (C and Objective-C only) 
-Wimplicit-function-declaration (C and Objective-C only) 
-Wcomment  
-Wformat   
-Wmain (only for C/ObjC and unless -ffreestanding)  
-Wmaybe-uninitialized 
-Wmissing-braces (only for C/ObjC) 
-Wnonnull  
-Wopenmp-simd 
-Wparentheses  
-Wpointer-sign  
-Wreorder   
-Wreturn-type  
-Wsequence-point  
-Wsign-compare (only in C++)  
-Wstrict-aliasing  
-Wstrict-overflow=1  
-Wswitch  
-Wtrigraphs  
-Wuninitialized  
-Wunknown-pragmas  
-Wunused-function  
-Wunused-label     
-Wunused-value     
-Wunused-variable  
-Wvolatile-register-var 

And there are often extra flags to the gcc command. Here are some examples.


### REFERENCES

[1] http://www.linux.org/threads/the-linux-kernel-configuring-the-kernel-part-1.4274/
    A tutorial on how to compile the kernel with info on different 
    configuration methods and such There is also a part two, that I have not 
    read.

[2] https://www.kernel.org/pub/software/scm/git/docs/user-manual.html#how-to-check-out
    A tutorial on git, which I can probably use to dig around old versions of 
    the kernel on their git site.

[3] https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html
    A long documentation on gcc. It specifies what gcc -Wall does for example.
    Which can probably come in handy at some point.

[4] http://vbdb.itu.dk/
    An online database which belongs to the paper '42 Variability Bugs In Linux'

[5] http://www3.ntu.edu.sg/home/ehchua/programming/cpp/gcc_make.html
    Something about the use of gcc and make.

[6] https://www.kernel.org/doc/Documentation/kbuild/kconfig.txt
    Something about kconfig

[7] http://www.mjmwired.net/kernel/Documentation/kbuild/kconfig.txt
    Ca. down 40% there is some notes on randconfig and what KCONFIG_SEED means.

[8] http://www.linuxquestions.org/questions/linux-hardware-18/compiling-64-bit-kernel-in-32-bit-linux-240183/
    A note on crosscompiling

[9] Gnu Make manpage
    A reference to how Gnu Make works, and the exit statuses

[A] https://code.google.com/p/distcc/
    A distributed C/C++ compiler. It may be useful. But probably not.

[B] http://www3.ntu.edu.sg/home/ehchua/programming/cpp/gcc_make.html
    About Preprocessing

[C] http://www.linuxfromscratch.org/lfs/view/stable/chapter08/kernel.html
    Howto on compiling the kernel. Do not rely on the kernel tree to be clean 
    after untarring.

[D] http://www.buildroot.org/downloads/manual/manual.html
    They have some clarifications on Kconfig language

[E] http://www.tldp.org/HOWTO/Lex-YACC-HOWTO.html
    yacc and bison explaination
