### TODO

  * Find out if running `make` actually runs `gcc -Wall`
      - maybe [5](ntu.edu.sg) can help figure something out
      - It looks like that both busybox and linuxkernel uses the -Wall flags in
        their makefiles. But I guess there are like multiple 100s of makefiles
        that I will have to check if all are using the  -Wall flag? (in linux,
        in busybox, there only seem to be 3 makefiles, and only 1 of these 
        contain the word `gcc`)
      - I can run `make V=1` to see all the commands that `make` are issuing, 
        and then grep those without `-Wall` to see if there are any.
  * Find out what the bottom lines in the buginfo files mean.
      - make: *** Waiting for unfinished jobs...
      - Maybe it has something to do with me compiling with multiple cores. that
        would make sense, I think.
  * Should I report errors that occur in filenames that end with `.o`?
      - Are these the same lines, that start with `make: ***` ?
      - Those are binary files, and are gibberish, so do not count those, I 
        guess. But still find out, and be sure.

  * It turns out, that `busybox` has some weird dependencies that generate
    errors when running `make`. They are some `selinux` packages. I don't know
    what to do about that.

  * Read [6](kernel.org) - maybe there is something about kconfig that is worth
    knowing.

  * Maybe make lots of configurations, and look at the statistically. How random
    are they really?
  * Try to see how many kernels can be compiled in a day by a normal laptop.

  * Make sure I also save what computer it has been run on. Maybe in the timefile

  * Make the status into one single line in stead of 6 lines per compile.
   
  * Make an alias from `make install`, so I don't accidentally install a weird
    kernel.


### DONE

  * Dig into running `make O=dir` to create all the output files in another dir.
    This could maybe help me save some time, since I would not have to untar 
    everything again.
      - This TOTALLY works. This can possibly save me some time..
      - I was wrong. When running `make` it cannot find the config, and stuff.
        So I will just go back.
    [DONE]
  * Download the 'BusyBox' code, and experiment on that. It is not as big, and
    is therefore faster to compile.
    [DONE!]
  * Try to get it to make some errors, and make it report back in the format we
    want (see section 'ERROR DATA')
      - I have started on the regular expressions, but they are not all done. I
        only get half of the errors on the regexps.
    [DONE]
  * Should I run `make all` in stead of just `make`?
      - I am pretty sure that `make all` is the same as just `make`
      - It is the same. It is stated at the last line in `make help`
    [DONE]
  * Can I use `make clean` or `make distclean` in stead of deleting the whole
    directory and untarring again?
      - I would not count on it. I tried taking the md5sum of the files list
        before `make distclean` and after unpacking the tar, and it was not
        the same. So better off just untarring.
    [DONE]

### QUESTIONS

  * Does `make randomconfig` always make a valid config file?
      - Shall I do some Kconfig validity testing?
      - If `make randconfig` does not create a valid config (which has happened
        to me a couple of times), it will say so itself.
        I am not sure, though, if it will output it to `stderr` or how I can 
        check if there were any kconfig errors.
  * Can I replicate one of the bugs from VBDb.itu.dk?
      - How can I tell what kernel version the commits are from?
  * What kind of bugs can `cgg -Wall` find?
      - Look at [3](gnu.org), it states what types of errors `gcc -Wall` will 
        find.
      ! But maybe start by defining what types of errors I would like. Maybe use
        the types they use in [4](VBDb.itu.dk).
      ! At the meeting 26. feb 2015 it was decided to use the error types from
        `gcc -Wall`. Not the ones from [4](VBDb.itu.dk).

### ERROR DATA

[config, 
analyzer used, 
time,
buginfo: [
    error type,
    filename, 
    line no, 
    error message ]

### -Wall

-Waddress   
-Warray-bounds=1 (only with -O2)  
-Wc++11-compat  -Wc++14-compat
-Wchar-subscripts  
-Wenum-compare (in C/ObjC; this is on by default in C++) 
-Wimplicit-int (C and Objective-C only) 
-Wimplicit-function-declaration (C and Objective-C only) 
-Wcomment  
-Wformat   
-Wmain (only for C/ObjC and unless -ffreestanding)  
-Wmaybe-uninitialized 
-Wmissing-braces (only for C/ObjC) 
-Wnonnull  
-Wopenmp-simd 
-Wparentheses  
-Wpointer-sign  
-Wreorder   
-Wreturn-type  
-Wsequence-point  
-Wsign-compare (only in C++)  
-Wstrict-aliasing  
-Wstrict-overflow=1  
-Wswitch  
-Wtrigraphs  
-Wuninitialized  
-Wunknown-pragmas  
-Wunused-function  
-Wunused-label     
-Wunused-value     
-Wunused-variable  
-Wvolatile-register-var 


### REFERENCES

[1] http://www.linux.org/threads/the-linux-kernel-configuring-the-kernel-part-1.4274/
    A tutorial on how to compile the kernel with info on different 
    configuration methods and such There is also a part two, that I have not 
    read.

[2] https://www.kernel.org/pub/software/scm/git/docs/user-manual.html#how-to-check-out
    A tutorial on git, which I can probably use to dig around old versions of 
    the kernel on their git site.

[3] https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html
    A long documentation on gcc. It specifies what gcc -Wall does for example.
    Which can probably come in handy at some point.

[4] http://vbdb.itu.dk/
    An online database which belongs to the paper '42 Variability Bugs In Linux'

[5] http://www3.ntu.edu.sg/home/ehchua/programming/cpp/gcc_make.html
    Something about the use of gcc and make.

[6] https://www.kernel.org/doc/Documentation/kbuild/kconfig.txt
    Something about kconfig
